stages:
  - build
  - test
  - deploy

variables:
  IMAGE_NAME: "${DOCKER_REGISTRY}/${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}.${CI_PIPELINE_ID}"
  CI_PROJECT_NAME: youdescribex-api
  DOCKER_REGISTRY: youdescribe
  CI_REGISTRY: docker.io
  TAR_FILE_NAME: "youdescribex-api.tar"
  TAR_FILE_FOLDER: ".docker"
  TAR_FILE_PATH: "/"

services:
  - docker:24.0.5-dind

before_script:
  - echo "Logging into Docker..."
  - docker login -u "$DOCKER_REGISTRY_USER" -p "$DOCKER_REGISTRY_PASSWORD" $CI_REGISTRY
  - docker info

build:
  stage: build
  script:
    - echo "Building Docker image..."
    - docker build --no-cache --build-arg APP_PORT=$PORT --build-arg GOOGLE_CRED_FILE=$GOOGLE_CRED_FILE --build-arg GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS --build-arg GPU_PIPELINE_PORT=$GPU_PIPELINE_PORT --build-arg CRYPTO_SEED=$CRYPTO_SEED -t "${IMAGE_NAME}" .
    - docker push "${IMAGE_NAME}"
    - echo "Build complete"
  tags:
    - backend
  only:
    - branches
    - dev
    - main

test:
  stage: test
  cache:
    paths:
      - node_modules/
  script:
    - echo "Installing dependencies..."
    - npm install
    - echo "Running linting..."
    - npm run lint
    - echo "Running tests..."
    - npm run test
  tags:
    - backend
  only:
    - branches
    - dev
    - main

deploy_dev:
  stage: deploy
  script:
    - echo "Deploying to development environment..."
    - docker pull "${IMAGE_NAME}"
    - docker run -d -p $PORT:$PORT --env-file .env "${IMAGE_NAME}"
    - echo "Deployment to development environment completed."
  tags:
    - backend
    - dev
  only:
    - dev

deploy_prod:
  stage: deploy
  script:
    - echo "Deploying to production environment..."
    - docker pull "${IMAGE_NAME}"
    - docker run -d -p $PORT:$PORT --env-file .env "${IMAGE_NAME}"
    - echo "Deployment to production environment completed."
  tags:
    - backend
    - prod
  only:
    - main